<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://example.org/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 10 Dec 2019 14:27:07 +0800</lastBuildDate>
    
	<atom:link href="https://example.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4. 寻找两个有序数组的中位数</title>
      <link>https://example.org/post/leetcode04/</link>
      <pubDate>Tue, 10 Dec 2019 14:27:07 +0800</pubDate>
      
      <guid>https://example.org/post/leetcode04/</guid>
      <description>寻找两个有序数组的中位数 这道题是leetcode的第三道题，在邓老师的书中第12章有一节是专门讲这个的，对应12.2.3节。不过使用书中递归</description>
    </item>
    
    <item>
      <title>Tcp</title>
      <link>https://example.org/post/tcp/</link>
      <pubDate>Wed, 04 Dec 2019 22:04:16 +0800</pubDate>
      
      <guid>https://example.org/post/tcp/</guid>
      <description>在这里做一下三次握手四次挥手以及拥塞控制的笔记 三次握手 客服端发送一个SYN为1的套接字，带有序列号（seq）。服务器端收到后回发一个SYN为</description>
    </item>
    
    <item>
      <title>Leetcode01</title>
      <link>https://example.org/post/leetcode01/</link>
      <pubDate>Mon, 02 Dec 2019 22:31:32 +0800</pubDate>
      
      <guid>https://example.org/post/leetcode01/</guid>
      <description>两数之和 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对</description>
    </item>
    
    <item>
      <title>Sort</title>
      <link>https://example.org/post/sort/</link>
      <pubDate>Wed, 27 Nov 2019 21:32:52 +0800</pubDate>
      
      <guid>https://example.org/post/sort/</guid>
      <description>quickSort 快排的概念是递归的在每个区间找到轴点，这个轴点的左边全部比轴点小，右边全部比轴点大 复杂度为O(nlogn)，平均复杂度O(1.39logn</description>
    </item>
    
    <item>
      <title>串匹配算法</title>
      <link>https://example.org/post/string/</link>
      <pubDate>Mon, 25 Nov 2019 16:20:20 +0800</pubDate>
      
      <guid>https://example.org/post/string/</guid>
      <description>蛮力算法 一个一个比对，先不记录 KMP算法 快记下来怕一会忘了 蛮力算法只要失配，文本串指针和模式串指针同时回退，实际上，文本串指针i完全可以不必</description>
    </item>
    
    <item>
      <title>Heap</title>
      <link>https://example.org/post/heap/</link>
      <pubDate>Sat, 23 Nov 2019 16:47:35 +0800</pubDate>
      
      <guid>https://example.org/post/heap/</guid>
      <description>优先级队列 将数据项的某种属性按照优先级来访问（我的理解） 接口 1 2 3 4 5 6 template &amp;lt;typename T&amp;gt; struct PQ { virtual void insert(T) = 0;//按照比较器确定的优先级次序插入词条 virtual T getMax()</description>
    </item>
    
    <item>
      <title>Hashtable</title>
      <link>https://example.org/post/hashtable/</link>
      <pubDate>Thu, 21 Nov 2019 20:06:10 +0800</pubDate>
      
      <guid>https://example.org/post/hashtable/</guid>
      <description>哈希表 基础定义概念不记录了，怎么去写一个哈希表，在这里记录一下 映射 要将想搜索的关键码先转成一个哈希码，因为关键字是字符串的话，我们要在一个数</description>
    </item>
    
    <item>
      <title>今日份的开心</title>
      <link>https://example.org/post/today/</link>
      <pubDate>Tue, 19 Nov 2019 20:52:36 +0800</pubDate>
      
      <guid>https://example.org/post/today/</guid>
      <description>https://www.bilibili.com/video/av76036998 今日份的jojo分享，填词是真的棒 以及 不得不说，jojo真的是一部好番，回忆起第三季，精彩的智斗，感人的羁绊，难顶</description>
    </item>
    
    <item>
      <title>RedBlck-Tree</title>
      <link>https://example.org/post/redblck/</link>
      <pubDate>Tue, 19 Nov 2019 19:50:26 +0800</pubDate>
      
      <guid>https://example.org/post/redblck/</guid>
      <description>红黑树 标准：在AVL树上的基础上进一步放宽，任一节点左右子树的高度，相差不得超过两倍 定义: (1) 树根始终为黑色 (2) 树根始终为黑色 (3) 其余节点若为红色</description>
    </item>
    
    <item>
      <title>B-Tree </title>
      <link>https://example.org/post/b-/</link>
      <pubDate>Tue, 12 Nov 2019 15:36:24 +0800</pubDate>
      
      <guid>https://example.org/post/b-/</guid>
      <description>B-树 基础定义不再写了，把b-树的各种算法记录一下 在这里补充一下，b-树的节点类中，存放关键码和孩子节点是使用vector来存放的 搜索算法 1</description>
    </item>
    
    <item>
      <title>SplayTree</title>
      <link>https://example.org/post/splaytree/</link>
      <pubDate>Sun, 10 Nov 2019 16:02:19 +0800</pubDate>
      
      <guid>https://example.org/post/splaytree/</guid>
      <description>伸展树 AVL树最大的缺点是删除一个节点，维持其拓扑结构可能需要O（logn）的时间 伸展树利用数据局部性： 刚刚被访问到的节点，极有可能在不久之</description>
    </item>
    
    <item>
      <title>二叉搜索树</title>
      <link>https://example.org/post/bst/</link>
      <pubDate>Wed, 06 Nov 2019 21:08:53 +0800</pubDate>
      
      <guid>https://example.org/post/bst/</guid>
      <description>定义 任一节点r的左（右）子树中，所有节点（若存在）均小于（大于）r。 二叉搜索树是“循关键码访问” 任何数据结构的查找排序插入等都不要忘了每个节</description>
    </item>
    
    <item>
      <title>数据结构学习-图</title>
      <link>https://example.org/post/graph/</link>
      <pubDate>Sun, 03 Nov 2019 18:53:40 +0800</pubDate>
      
      <guid>https://example.org/post/graph/</guid>
      <description>前言-记录我的学习，图的概念什么的就不在文章中说了，只在此记录图的抽象数据类型的实现以及各种算法 图与邻接矩阵 图的模板类中只是定义了边和顶点的</description>
    </item>
    
    <item>
      <title>数据结构学习之BinaryTree</title>
      <link>https://example.org/post/bintree/</link>
      <pubDate>Thu, 31 Oct 2019 21:20:54 +0800</pubDate>
      
      <guid>https://example.org/post/bintree/</guid>
      <description>遍历 先序遍历 递归版 1 2 3 4 5 6 7 8 template &amp;lt;typename T,typename VST&amp;gt;//元素类型和操作器 void travPre_R(BinNodePosi(T) x,VST &amp;amp;visit)//第一个参数是二叉树节点 { if(!x) retu</description>
    </item>
    
    <item>
      <title>OOP</title>
      <link>https://example.org/post/oop/</link>
      <pubDate>Wed, 30 Oct 2019 21:35:26 +0800</pubDate>
      
      <guid>https://example.org/post/oop/</guid>
      <description>动态绑定 根据是基类还是派生类调用虚函数来选择使用哪个版本的函数，这就是动态绑定。运行版本由实参决定，所以又被称为运行时绑定。 未完待续</description>
    </item>
    
    <item>
      <title>C&#43;&#43;之移动构造函数与移动赋值运算符</title>
      <link>https://example.org/post/move/</link>
      <pubDate>Wed, 30 Oct 2019 21:14:41 +0800</pubDate>
      
      <guid>https://example.org/post/move/</guid>
      <description>三/五法则 有三个基本操作可以控制类的拷贝操作：拷贝构造函数、拷贝赋值运算符和析构函数。在新标准下，一个类还可以定义一个移动构造函数和移动赋值</description>
    </item>
    
    <item>
      <title>栈的学习-中缀表达式求值及转换为后缀表达式</title>
      <link>https://example.org/post/datas/</link>
      <pubDate>Sat, 26 Oct 2019 17:07:53 +0800</pubDate>
      
      <guid>https://example.org/post/datas/</guid>
      <description>&lt;h1 id=&#34;中缀表达式求值及转换为后缀表达式&#34;&gt;中缀表达式求值及转换为后缀表达式&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;利用栈的延迟缓冲的特性&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;Primer12</title>
      <link>https://example.org/post/c&#43;&#43;primer12.3/</link>
      <pubDate>Tue, 22 Oct 2019 17:47:00 +0800</pubDate>
      
      <guid>https://example.org/post/c&#43;&#43;primer12.3/</guid>
      <description>第12.3节总结 花了一下午的时间学习第十二章第三节，使用标准库的文本查询程序，总体就是把之前学的知识融会贯通，比如关联容器智能指针流输入等等</description>
    </item>
    
    <item>
      <title>我想告诉自己及正在学习中的人</title>
      <link>https://example.org/post/ganwu/</link>
      <pubDate>Sun, 20 Oct 2019 15:09:46 +0800</pubDate>
      
      <guid>https://example.org/post/ganwu/</guid>
      <description>&lt;h1 id=&#34;我的感想&#34;&gt;我的感想&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;学习之动态内存与智能指针</title>
      <link>https://example.org/post/cpp2/</link>
      <pubDate>Sat, 19 Oct 2019 14:43:03 +0800</pubDate>
      
      <guid>https://example.org/post/cpp2/</guid>
      <description>&lt;h1 id=&#34;记录c-primer的学习历程&#34;&gt;记录C++Primer的学习历程&lt;/h1&gt;

&lt;h2 id=&#34;动态内存和智能指针&#34;&gt;动态内存和智能指针&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>